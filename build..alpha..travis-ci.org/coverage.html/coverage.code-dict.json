{"/home/travis/build/npmtest/node-npmtest-nginx-conf/test.js":"/* istanbul instrument in package npmtest_nginx_conf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nginx-conf/lib.npmtest_nginx_conf.js":"/* istanbul instrument in package npmtest_nginx_conf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nginx_conf = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nginx_conf = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nginx-conf/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nginx-conf && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nginx_conf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nginx_conf\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nginx_conf.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nginx_conf.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nginx_conf.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nginx_conf.__dirname + '/lib.npmtest_nginx_conf.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nginx-conf/node_modules/nginx-conf/index.js":"var pkg = require('./package.json'),\n\tparser = require('./src/parser');\n\nexports.version = pkg.version;\nexports.NginxConfFile = require('./src/conf').NginxConfFile;\nexports.NginxParser = parser.NginxParser;\nexports.parseFile = parser.parseFile;\nexports.parse = parser.parse;","/home/travis/build/npmtest/node-npmtest-nginx-conf/node_modules/nginx-conf/src/parser.js":"var fs = require('fs');\n\nfunction NginxParseTreeNode(name, value, parent, children) {\n\tthis.name = name || '';\n\tthis.value = value || '';\n\tthis.parent = parent || null;\n\tthis.children = children || [];\n\tthis.comments = [];\n\tthis.isVerbatim = false;\n}\n\nfunction NginxParser() {\n\tthis.source = '';\n\tthis.index = -1;\n\tthis.tree = null;\n\tthis.context = null;\n\tthis.error = null;\n}\n\nNginxParser.prototype.parse = function(source, callback) {\n\tthis.source = source;\n\tthis.index = 0;\n\tthis.tree = new NginxParseTreeNode('[root]');\n\tthis.context = new NginxParseTreeNode(null, null, this.tree);\n\tthis.error = null;\n\n\tdo {\n\t\tthis.parseNext();\n\t\tif (this.error) {\n\t\t\tcallback && callback(this.error, this.tree);\n\t\t\treturn;\n\t\t}\n\t} while (this.index < this.source.length);\n\n\tcallback && callback(this.error, this.tree);\n};\n\nNginxParser.prototype.parseNext = function() {\n\tvar c = this.source.charAt(this.index),\n\t\tvalue;\n\n\tif (!c) {\n\t\treturn;\n\t}\n\n\tswitch (c) {\n\t\tcase '{':\n\t\tcase ';':\n\t\t\tthis.context.value = this.context.value.trim();\n\t\t\tthis.context.parent.children.push(this.context);\n\n\t\t\tif (c === '{' && this.context.name && /_by_lua_block$/.test(this.context.name)) {\n\t\t\t\t//special handling of lua blocks: they are not treated as a regular \"block\", which would\n\t\t\t\t//have child directives and stuff. lua \"blocks\" are just lua code surrounded by \"{ }\".\n\t\t\t\tif (this.context.value) {\n\t\t\t\t\t//there's already a value set, that means something is weird (pretty sure this is invalid...)\n\t\t\t\t\t//basically the \"lol\" in something like this: content_by_lua_block lol { echo 'hello' }\n\t\t\t\t\tthis.setError(\n\t\t\t\t\t\t'Already a value set for Lua block (alert nginx-conf developers if your syntax is valid)'\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tthis.context.value = this.readVerbatimBlock();\n\t\t\t\tthis.context.isVerbatim = true;\n\t\t\t\tthis.context = new NginxParseTreeNode(null, null, this.context.parent);\n\t\t\t} else {\n\t\t\t\t//new context is child of current context, or a sibling to the parent\n\t\t\t\tthis.context = new NginxParseTreeNode(null, null, c === '{' ? this.context : this.context.parent);\n\t\t\t}\n\n\t\t\tthis.index++;\n\t\t\tbreak;\n\t\tcase '}':\n\t\t\t//new context is sibling to the parent\n\t\t\tthis.context = new NginxParseTreeNode(null, null, this.context.parent.parent);\n\t\t\tthis.index++;\n\t\t\tbreak;\n\t\tcase '\\n':\n\t\tcase '\\r':\n\t\t\tif (this.context.value) {\n\t\t\t\tthis.context.value += c;\n\t\t\t}\n\t\t\tthis.index++;\n\t\t\tbreak;\n\t\tcase '\\'':\n\t\tcase '\"':\n\t\t\tif (!this.context.name) {\n\t\t\t\tthis.context.name = this.readString();\n\t\t\t} else {\n\t\t\t\tthis.context.value += this.readString();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '#':\n\t\t\tthis.context.comments.push(this.readComment());\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tvalue = this.readWord();\n\t\t\tif (!this.context.name) {\n\t\t\t\tthis.context.name = value.trim();\n\t\t\t\t//read trailing whitespace\n\t\t\t\tvar ws = /^\\s*/.exec(this.source.substring(this.index));\n\t\t\t\tif (ws) {\n\t\t\t\t\tthis.index += ws[0].length;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.context.value += value;\n\t\t\t}\n\t\t\tbreak;\n\t}\n};\n\nNginxParser.prototype.readString = function() {\n\tvar delimiter = this.source.charAt(this.index),\n\t\tvalue = delimiter;\n\tfor (var i = this.index + 1; i < this.source.length; i++) {\n\t\tif (this.source.charAt(i) === '\\\\') {\n\t\t\tvalue += this.source.charAt(i) + this.source.charAt(i + 1);\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (this.source.charAt(i) === delimiter) {\n\t\t\tvalue += delimiter;\n\t\t\tbreak;\n\t\t}\n\n\t\tvalue += this.source.charAt(i);\n\t}\n\n\tif (value.length < 2 || value.charAt(value.length - 1) !== delimiter) {\n\t\tthis.setError('Unable to parse quote-delimited value (probably an unclosed string)');\n\t\treturn '';\n\t}\n\tthis.index += value.length;\n\treturn value;\n};\n\nNginxParser.prototype.setError = function(message) {\n\tvar line = (this.source.substring(0, this.index).match(/\\n/g) || []).length + 1;\n\n\tthis.error = {\n\t\tmessage: message,\n\t\tindex: this.index,\n\t\tline: line\n\t};\n};\n\nNginxParser.prototype.readWord = function() {\n\tvar result = /^(.+?)[\\s#;{}'\"]/.exec(this.source.substring(this.index));\n\tif (!result) {\n\t\tthis.setError('Word not terminated. Are you missing a semicolon?');\n\t\treturn '';\n\t}\n\tthis.index += result[1].length;\n\treturn result[1];\n};\n\nNginxParser.prototype.readComment = function() {\n\tvar result = /(.*?)(?:\\r\\n|\\n|$)/.exec(this.source.substring(this.index));\n\tthis.index += result ? result[0].length : 0;\n\treturn result[1].substring(1); //ignore # character\n};\n\nNginxParser.prototype.readVerbatimBlock = function() {\n\t//can't just use regex because it has to count the number of matching {}\n\t//NOTE: this will break for lua comments that contain \"{\" or \"}\"\n\tvar openingBrackets = 0,\n\t\tclosingBrackets = 0,\n\t\tcurrent,\n\t\tresult = '';\n\n\twhile (current = this.source.charAt(this.index)) {\n\t\tswitch (current) {\n\t\t\tcase '}':\n\t\t\t\tclosingBrackets++;\n\t\t\t\tbreak;\n\t\t\tcase '{':\n\t\t\t\topeningBrackets++;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tresult += current;\n\t\tthis.index++;\n\n\t\tif (openingBrackets === closingBrackets) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (openingBrackets !== closingBrackets) {\n\t\tthis.setError('Verbatim bock not terminated. Are you missing a closing curly bracket?');\n\t\treturn '';\n\t}\n\n\treturn result.replace(/^{/, '').replace(/}$/, '');\n};\n\nNginxParser.prototype.parseFile = function(file, encoding, callback) {\n\tvar parser = this;\n\tfs.readFile(file, encoding, function(err, contents) {\n\t\tif (err) {\n\t\t\tcallback && callback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tparser.parse(contents, callback);\n\t});\n};\n\nexports.NginxParser = NginxParser;\nexports.parse = function(source, callback) {\n\tnew NginxParser().parse(source, callback);\n};\nexports.parseFile = function(file, encoding, callback) {\n\tnew NginxParser().parseFile(file, encoding, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-nginx-conf/node_modules/nginx-conf/src/conf.js":"var parser = require('./parser'),\n\tfs = require('fs'),\n\tblacklistedNames = {\n\t\t_name: 1, _value: 1, _remove: 1, _add: 1,\n\t\t_getString: 1, _root: 1, toString: 1, _comments: 1,\n\t\t_isVerbatim: 1, _addVerbatimBlock: 1\n\t};\n\nfunction createConfItem(file, context, node) {\n\tvar name = node.name,\n\t\tvalue = node.value,\n\t\tchildren = node.children,\n\t\tcomments = node.comments || [];\n\n\tvar newContext = {\n\t\t_remove: function(name, index) {\n\t\t\tindex = Math.max(index || 0, 0);\n\t\t\tif (!this[name]) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar node = this[name];\n\t\t\tif (Array.isArray(this[name])) {\n\t\t\t\tif (this[name][index]) {\n\t\t\t\t\tnode = this[name][index];\n\t\t\t\t\tthis[name].splice(index, 1);\n\t\t\t\t\tif (this[name].length === 1) {\n\t\t\t\t\t\tthis[name] = this[name][0];\n\t\t\t\t\t}\n\t\t\t\t\tfile.emit('removed', node);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnode = this[name];\n\t\t\t\tdelete this[name];\n\t\t\t\tfile.emit('removed', node);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\t_add: function(name, value, children, comments, options) {\n\t\t\tif (blacklistedNames[name]) {\n\t\t\t\tthrow new Error('The name \"' + name + '\" is reserved');\n\t\t\t}\n\n\t\t\toptions = options || {};\n\n\t\t\tvar node = createConfItem(file, newContext, {\n\t\t\t\tname: name,\n\t\t\t\tvalue: value,\n\t\t\t\tchildren: children,\n\t\t\t\tcomments: comments,\n\t\t\t\tisVerbatim: !!options.isVerbatim\n\t\t\t});\n\t\t\tfile.emit('added', node);\n\t\t\treturn this;\n\t\t},\n\n\t\t_addVerbatimBlock: function(name, value, comments) {\n\t\t\treturn this._add(name, value, null, comments, {\n\t\t\t\tisVerbatim: true\n\t\t\t});\n\t\t},\n\n\t\t_getString: function(depth) {\n\t\t\tdepth = depth || +!this._root;\n\t\t\tvar prefix = new Array(depth).join(file.tab),\n\t\t\t\tbuffer = '',\n\t\t\t\ti;\n\n\t\t\tif (this._comments.length) {\n\t\t\t\tfor (i = 0; i < this._comments.length; i++) {\n\t\t\t\t\tbuffer += '#' + this._comments[i] + '\\n';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer += prefix + (!this._root ? this._name : '');\n\n\t\t\tif (this._isVerbatim) {\n\t\t\t\tbuffer += ' {' + (this._value || '') + '}';\n\t\t\t} else if (this._value) {\n\t\t\t\tbuffer += ' ' + this._value;\n\t\t\t}\n\n\t\t\tvar properties = Object.keys(this)\n\t\t\t\t.filter(function(key) {\n\t\t\t\t\treturn typeof(newContext[key]) !== 'function';\n\t\t\t\t})\n\t\t\t\t.map(function(key) {\n\t\t\t\t\treturn newContext[key];\n\t\t\t\t});\n\n\t\t\tif (properties.length) {\n\t\t\t\tif (!this._root) {\n\t\t\t\t\tbuffer += ' {\\n';\n\t\t\t\t}\n\t\t\t\tfor (i = 0; i < properties.length; i++) {\n\t\t\t\t\tvar prop = properties[i];\n\t\t\t\t\tif (Array.isArray(prop)) {\n\t\t\t\t\t\tfor (var j = 0; j < prop.length; j++) {\n\t\t\t\t\t\t\tbuffer += prop[j]._getString(depth + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuffer += prop._getString(depth + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!this._root) {\n\t\t\t\t\tbuffer += prefix + '}\\n';\n\t\t\t\t}\n\t\t\t} else if (!this._root) {\n\t\t\t\tif (!this._isVerbatim) {\n\t\t\t\t\tbuffer += ';';\n\t\t\t\t}\n\t\t\t\tbuffer += '\\n';\n\t\t\t}\n\n\t\t\treturn buffer;\n\t\t},\n\n\t\ttoString: function() {\n\t\t\treturn this._getString(0);\n\t\t}\n\t};\n\n\tObject.defineProperty(newContext, '_value', {\n\t\tenumerable: false,\n\t\tget: function() {\n\t\t\treturn value;\n\t\t},\n\t\tset: function(newValue) {\n\t\t\tnewValue = newValue.toString();\n\t\t\tif (value === newValue) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar oldValue = value;\n\t\t\tvalue = newValue;\n\t\t\tfile.emit('changed', newContext, oldValue);\n\t\t}\n\t});\n\n\tObject.defineProperty(newContext, '_isVerbatim', {\n\t\tenumerable: false,\n\t\tvalue: node.isVerbatim,\n\t\twritable: false\n\t});\n\n\tObject.defineProperty(newContext, '_name', {\n\t\tenumerable: false,\n\t\tvalue: name,\n\t\twritable: false\n\t});\n\n\tObject.defineProperty(newContext, '_comments', {\n\t\tenumerable: false,\n\t\tvalue: comments,\n\t\twritable: false\n\t});\n\n\tif (context[name]) {\n\t\t//already exists, create an array or append it to the new one\n\t\tif (!Array.isArray(context[name])) {\n\t\t\tcontext[name] = [ context[name] ];\n\t\t}\n\n\t\tcontext[name].push(newContext);\n\t} else {\n\t\tcontext[name] = newContext;\n\t}\n\n\tif (children) {\n\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\tcreateConfItem(file, newContext, children[i]);\n\t\t}\n\t}\n\n\treturn newContext;\n}\n\nfunction NginxConfFile(tree, options) {\n\toptions = options || {};\n\tthis.files = [];\n\tthis.tab = options.tab || '    ';\n\tthis._name = 'NginxConfFile';\n\tthis.liveListener = (function(file) {\n\t\treturn function() {\n\t\t\tfile.flush();\n\t\t};\n\t}(this));\n\tthis.writeTimeout = null;\n\n\tcreateConfItem(this, this, { name: 'nginx' });\n\tObject.defineProperty(this.nginx, '_root', {\n\t\twritable: false,\n\t\tvalue: true,\n\t\tenumerable: false\n\t});\n\tfor (var i = 0; i < tree.children.length; i++) {\n\t\tvar node = tree.children[i];\n\t\tcreateConfItem(this, this.nginx, node);\n\t}\n}\n\nNginxConfFile.prototype.__proto__ = require('events').EventEmitter.prototype;\n\nNginxConfFile.prototype.live = function(file) {\n\tif (this.files.indexOf(file) === -1) {\n\t\tthis.files.push(file);\n\t\tif (this.files.length === 1) {\n\t\t\tthis.on('added', this.liveListener);\n\t\t\tthis.on('removed', this.liveListener);\n\t\t\tthis.on('changed', this.liveListener);\n\t\t}\n\t}\n\n\treturn this;\n};\n\nNginxConfFile.prototype.die = function(file) {\n\tvar index = this.files.indexOf(file);\n\tif (index !== -1) {\n\t\tthis.files.splice(index, 1);\n\t\tif (this.files.length == 0) {\n\t\t\tthis.removeListener('added removed changed', this.liveListener);\n\t\t}\n\t}\n\n\treturn this;\n};\n\n/**\n * To handle potentially concurrent writes, use flush() instead.\n */\nNginxConfFile.prototype.write = function(callback) {\n\tif (!this.files.length) {\n\t\tcallback && callback(null, false);\n\t\treturn;\n\t}\n\n\tvar contents = this.toString(),\n\t\tlen = this.files.length,\n\t\terrors = [],\n\t\tcompleted = 0;\n\n\tfor (var i = 0; i < len; i++) {\n\t\tfs.writeFile(this.files[i], contents, 'utf8', function(err) {\n\t\t\terr && errors.push(err);\n\t\t\tcompleted++;\n\t\t\tif (completed === len) {\n\t\t\t\tcallback && callback(errors.length ? errors : null, true);\n\t\t\t}\n\t\t});\n\t}\n};\n\nNginxConfFile.prototype.flush = function(callback) {\n\tif (this.writeTimeout) {\n\t\tclearTimeout(this.writeTimeout);\n\t}\n\n\t//the call to write() gets shoved into the event loop so that\n\t//you can modify the tree more than once without hoping that\n\t//no race conditions occur\n\n\t//e.g. conf._remove('foo'); conf._remove('bar'); will only issue\n\t//one call to write(), eliminating any possible race conditions\n\tvar self = this;\n\tthis.writeTimeout = setTimeout(function() {\n\t\tself.write(function(err, wrote) {\n\t\t\tif (!err && wrote) {\n\t\t\t\tself.emit('flushed');\n\t\t\t}\n\n\t\t\tcallback && callback(err);\n\t\t});\n\t}, 1);\n};\n\nNginxConfFile.prototype.toString = function() {\n\treturn this.nginx.toString();\n};\n\nNginxConfFile.create = function(file, options, callback) {\n\tif (typeof(options) === 'function') {\n\t\tcallback = options;\n\t\toptions = null;\n\t}\n\n\tparser.parseFile(file, 'utf8', function(err, tree) {\n\t\tif (err) {\n\t\t\tcallback && callback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tcallback && callback(null, new NginxConfFile(tree, options).live(file));\n\t});\n};\n\nNginxConfFile.createFromSource = function(source, options, callback) {\n\tif (typeof(options) === 'function') {\n\t\tcallback = options;\n\t\toptions = null;\n\t}\n\n\tparser.parse(source, function(err, tree) {\n\t\tif (err) {\n\t\t\tcallback && callback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tcallback && callback(null, new NginxConfFile(tree, options));\n\t});\n};\n\nexports.NginxConfFile = NginxConfFile;\n"}